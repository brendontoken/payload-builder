{"version":3,"sources":["components/TryButton.js","components/JsonInput.js","components/Payload.js","components/PayloadTransformer.js","App.js","serviceWorker.js","index.js"],"names":["TryButton","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","Component","defaultInput","JsonInput","props","_this","call","componentDidMount","resetInput","handleInputChange","e","text","target","setState","inputValue","console","log","concat","JSON","parse","isValid","onPayloadChange","handleReset","preventDefault","newText","state","onChange","rows","style","border","onClick","Payload","payload","PayloadTransformer","_React$Component","handlePayloadChange","components_JsonInput","components_Payload","React","App","className","components_TryButton","components_PayloadTransformer","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83da9f87.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class TryButton extends Component {\n  render() {\n    return (\n      <div>\n        Try it out\n      </div>\n    )\n  }\n}\n\nexport default TryButton\n\n","import React, { Component } from 'react'\n\nconst defaultInput = `{\n  \"header\": {\n    \"version\": 1,\n    \"actionCode\": \"A1\"\n  },\n  \"actionContents\": {\n\n  }\n}`;\n\nexport class JsonInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: defaultInput,\n      isValid: true\n    }\n  }\n\n  componentDidMount = () => {\n    this.resetInput();\n  }\n\n  handleInputChange = (e) => {\n    const text = e.target.value;\n    this.setState({ inputValue: text });\n    console.log(`onInputChanged \"${text}\"`);\n    let parsed;\n    try {\n      parsed = JSON.parse(text);\n      this.setState({ isValid: true });\n    } catch(e) {\n      this.setState({ isValid: false });\n      return;\n    }\n\n    this.props.onPayloadChange(text);\n  }\n\n  handleReset = (e) => {\n    e.preventDefault();\n    console.log('resetInput');\n    this.resetInput();\n  }\n\n  resetInput = () => {\n    const newText = defaultInput;\n    this.setState({ inputValue: newText });\n    this.props.onPayloadChange(newText);\n  }\n  \n  render() {\n    return (\n      <div>\n        <div>\n          <h3>Specify Payload Parameters</h3>\n          <textarea \n            onChange={this.handleInputChange}\n            value={this.state.inputValue} \n            rows={9}\n            style={this.state.isValid ? { } : { border: 'solid 2px red'}}>\n          </textarea>\n        </div>\n        <div>\n          <button onClick={this.handleReset}>\n            Reset\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default JsonInput","import React, { Component } from 'react'\n\nexport class Payload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      payload: props.payload\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Generated Payload</h3>\n        <p>{this.props.payload}</p>\n        <h4>Compact</h4>\n        <h4>Expanded</h4>\n      </div>\n    )\n  }\n}\n\nexport default Payload\n","import React from 'react'\n\nimport JsonInput from './JsonInput';\nimport Payload from './Payload';\n\nexport class PayloadTransformer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      payload: null\n    };\n  }\n\n  handlePayloadChange = (payload) => {\n    console.log('handlePayloadChange():', payload);\n    this.setState({ payload: payload});\n  }\n\n  render() {\n    return (\n      <div>\n        <JsonInput onPayloadChange={this.handlePayloadChange}/>\n        <Payload payload={this.state.payload}/>\n      </div>\n    )\n  }\n}\n\nexport default PayloadTransformer\n","import React from 'react';\nimport './App.css';\n\nimport TryButton from './components/TryButton';\nimport PayloadTransformer from './components/PayloadTransformer';\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TryButton />\n        <PayloadTransformer />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}